entities:
- name: service
  namespace: laplacian.arch.api.service
  properties:
  - name: name
    type: string

  - name: version
    type: string

  - name: api_version
    type: string
    optional: true
    default_value: |
      "v1"

  - name: endpoint
    type: string
    optional: true
    default_value: |
      "${protocol}://${host}:${port}${path}/${apiVersion}"

  - name: host
    type: string
    optional: true
    default_value: |
      "name.lowerHyphenize()"

  - name: port
    type: number
    optional: true
    default_value: |
      8080

  - name: protocol
    type: string
    domain:
      choices:
      - value: http
      - value: https
    optional: true
    default_value: |
      "http"

  - name: path
    type: string
    optional: true
    default_value: |
      "/${name.lowerHyphenize()}"

  - name: namespace
    type: string
    domain_type_name: namespace
    optional: true
    default_value: |
      "${_context.get("project.namespace")}.service.${name.lowerUnderscorize()}"

  - name: description
    type: string
    optional: true
    default_value: |
      name

  relationships:
  - name: datasources
    cardinality: '*'
    reference_entity_name: datasource
    aggregate: true

  - name: default_datasource
    cardinality: '0..1'
    reference_entity_name: datasource
    snippet: |
      datasources
      .find{ it.name == "default" }

  - name: graphql_type_entries
    cardinality: '*'
    reference_entity_name: graphql_type_entry
    aggregate: true

  - name: graphql_types
    cardinality: '*'
    reference_entity_name: graphql_type
    snippet: |
      graphqlTypeEntries.map{ it.graphqlType }.distinct()

  - name: entities_used_in_graphql
    cardinality: '*'
    reference_entity_name: entity
    snippet: |
      graphqlTypes
        .map{ if (it is EntityOnDatabase) it.entity else null }
        .filterNotNull()
        .distinct()

  - name: top_level_entities_used_in_graphql
    cardinality: '*'
    reference_entity_name: entity
    snippet: |
      entitiesUsedInGraphql.filter{ it.topLevel }